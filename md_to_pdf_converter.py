#!/usr/bin/env python3
"""
Markdown to PDF Converter for MedBot
A dedicated tool for converting markdown files to beautifully formatted PDFs
"""

import os
import sys
import re
from pathlib import Path
import pypandoc
from typing import Optional, List, Dict
import json
import subprocess
import shutil

class MarkdownToPDFConverter:
    """Professional markdown to PDF converter with multiple engines and beautiful formatting"""
    
    def __init__(self, output_dir: str = "pdf_outputs"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # Check available PDF engines
        self.available_engines = self._detect_available_engines()
        print(f"🔍 Available PDF engines: {', '.join(self.available_engines)}")
    
    def _detect_available_engines(self) -> List[str]:
        """Detect which PDF engines are available on the system"""
        engines = []
        
        # Check pdflatex
        if shutil.which('pdflatex'):
            engines.append('pdflatex')
        
        # Check wkhtmltopdf
        if shutil.which('wkhtmltopdf'):
            engines.append('wkhtmltopdf')
        
        # Check weasyprint
        try:
            import weasyprint
            engines.append('weasyprint')
        except ImportError:
            pass
        
        # Check prince
        if shutil.which('prince'):
            engines.append('prince')
        
        return engines
    
    def create_professional_template(self, article_dir: Path) -> Path:
        """Create a professional LaTeX template with beautiful formatting"""
        template_file = article_dir / "professional_template.tex"
        
        template_content = r"""\documentclass[11pt,a4paper]{article}

% ==== PACKAGES ====
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{array}
\usepackage{parskip}
\usepackage{setspace}
\usepackage{color}
\usepackage{listings}
\usepackage{fancyhdr}
\usepackage{titlesec}
\usepackage{textcomp}
\usepackage{upquote}
\usepackage{microtype}
\usepackage{xcolor}
\usepackage{tcolorbox}
\usepackage{framed}
\usepackage{mdframed}
\usepackage{enumitem}
\usepackage{listings}
\usepackage{fontawesome}

% ==== GEOMETRY ====
\geometry{
    left=2.5cm,
    right=2.5cm,
    top=2.5cm,
    bottom=2.5cm,
    headheight=15pt,
    footskip=30pt
}

% ==== COLORS ====
\definecolor{primary}{RGB}{59, 89, 152}
\definecolor{secondary}{RGB}{66, 103, 178}
\definecolor{accent}{RGB}{255, 153, 0}
\definecolor{lightgray}{RGB}{245, 245, 245}
\definecolor{darkgray}{RGB}{64, 64, 64}

% ==== TYPOGRAPHY ====
\setlength{\parindent}{0pt}
\setlength{\parskip}{12pt}
\linespread{1.15}

% ==== HYPERREF SETUP ====
\hypersetup{
    colorlinks=true,
    linkcolor=primary,
    urlcolor=secondary,
    citecolor=accent,
    filecolor=darkgray,
    pdftitle={Research Article},
    pdfauthor={MedBot},
    pdfsubject={Medical Research},
    pdfkeywords={medicine, research, healthcare}
}

% ==== TITLE FORMATTING ====
\titleformat{\section}
    {\Large\bfseries\color{primary}}
    {\thesection}
    {1em}
    {}
    [\titlerule]

\titleformat{\subsection}
    {\large\bfseries\color{secondary}}
    {\thesubsection}
    {1em}
    {}

\titleformat{\subsubsection}
    {\normalsize\bfseries\color{darkgray}}
    {\thesubsubsection}
    {1em}
    {}

% ==== CUSTOM ENVIRONMENTS ====
\newenvironment{infobox}
    {\begin{tcolorbox}[colback=lightgray,colframe=primary,arc=0pt,outer arc=0pt]}
    {\end{tcolorbox}}

\newenvironment{warningbox}
    {\begin{tcolorbox}[colback=orange!10,colframe=orange,arc=0pt,outer arc=0pt]}
    {\end{tcolorbox}}

% ==== HEADER AND FOOTER ====
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{\textcolor{primary}{\textbf{MedBot Research Article}}}
\fancyhead[R]{\textcolor{secondary}{\thepage}}
\fancyfoot[C]{\textcolor{darkgray}{\small Generated by MedBot Healthcare AI Assistant}}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

% ==== UNICODE CHARACTER HANDLING ====
\DeclareUnicodeCharacter{2212}{-}  % Unicode minus sign
\DeclareUnicodeCharacter{2013}{-}  % En dash
\DeclareUnicodeCharacter{2014}{-}  % Em dash
\DeclareUnicodeCharacter{00D7}{$\times$}  % Multiplication sign
\DeclareUnicodeCharacter{00F7}{/}  % Division sign
\DeclareUnicodeCharacter{00B1}{$\pm$}  % Plus-minus sign
\DeclareUnicodeCharacter{2264}{$\leq$}  % Less than or equal
\DeclareUnicodeCharacter{2265}{$\geq$}  % Greater than or equal
\DeclareUnicodeCharacter{2260}{$\neq$}  % Not equal
\DeclareUnicodeCharacter{2248}{$\approx$}  % Approximately equal
\DeclareUnicodeCharacter{00B0}{$^{\circ}$}  % Degree symbol
\DeclareUnicodeCharacter{03B1}{$\alpha$}  % Greek alpha
\DeclareUnicodeCharacter{03B2}{$\beta$}  % Greek beta
\DeclareUnicodeCharacter{03B3}{$\gamma$}  % Greek gamma
\DeclareUnicodeCharacter{03B4}{$\delta$}  % Greek delta
\DeclareUnicodeCharacter{03BC}{$\mu$}  % Greek mu
\DeclareUnicodeCharacter{03C3}{$\sigma$}  % Greek sigma
\DeclareUnicodeCharacter{03C4}{$\tau$}  % Greek tau
\DeclareUnicodeCharacter{03C7}{$\chi$}  % Greek chi

% ==== DOCUMENT START ====
\begin{document}

% ==== TITLE PAGE ====
\begin{titlepage}
    \centering
    
    % Logo/Icon (if available)
    \vspace*{2cm}
    \textcolor{primary}{\Huge\textbf{MedBot}}\\[0.5cm]
    \textcolor{secondary}{\Large Healthcare AI Assistant}\\[1cm]
    
    % Title
    \textcolor{primary}{\Huge\textbf{Research Article}}\\[1cm]
    
    % Subtitle
    \textcolor{darkgray}{\Large Medical Research Analysis}\\[2cm]
    
    % Date
    \textcolor{secondary}{\large \today}\\[2cm]
    
    % Footer
    \vfill
    \textcolor{darkgray}{\small Generated by MedBot - Advanced Healthcare AI}\\[0.5cm]
    \textcolor{lightgray}{\rule{0.4\textwidth}{0.4pt}}
\end{titlepage}

% ==== TABLE OF CONTENTS ====
\newpage
\tableofcontents
\newpage

% ==== CONTENT STARTS HERE ====
"""
        
        with open(template_file, "w", encoding="utf-8") as f:
            f.write(template_content)
        
        return template_file
    
    def create_html_template(self, article_dir: Path) -> Path:
        """Create a beautiful HTML template for alternative PDF generation"""
        template_file = article_dir / "html_template.html"
        
        template_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Research Article - MedBot</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #fff;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 60px;
            padding: 40px 0;
            border-bottom: 3px solid #3b5998;
        }
        
        .logo {
            font-size: 3rem;
            font-weight: 700;
            color: #3b5998;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: #666;
            font-weight: 400;
        }
        
        .date {
            margin-top: 20px;
            color: #999;
            font-size: 0.9rem;
        }
        
        h1 {
            font-size: 2.5rem;
            color: #3b5998;
            margin: 40px 0 20px 0;
            font-weight: 600;
            border-bottom: 2px solid #e1e5e9;
            padding-bottom: 10px;
        }
        
        h2 {
            font-size: 1.8rem;
            color: #4267b2;
            margin: 30px 0 15px 0;
            font-weight: 600;
        }
        
        h3 {
            font-size: 1.4rem;
            color: #4267b2;
            margin: 25px 0 12px 0;
            font-weight: 500;
        }
        
        h4 {
            font-size: 1.2rem;
            color: #4267b2;
            margin: 20px 0 10px 0;
            font-weight: 500;
        }
        
        p {
            margin: 16px 0;
            text-align: justify;
        }
        
        .abstract {
            background: #f8f9fa;
            border-left: 4px solid #3b5998;
            padding: 20px;
            margin: 20px 0;
            border-radius: 0 8px 8px 0;
        }
        
        .abstract h2 {
            color: #3b5998;
            margin-top: 0;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e1e5e9;
        }
        
        th {
            background: #3b5998;
            color: white;
            font-weight: 600;
        }
        
        tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        tr:hover {
            background: #e3f2fd;
        }
        
        .figure {
            text-align: center;
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .figure img {
            max-width: 100%;
            height: auto;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .figure-caption {
            margin-top: 15px;
            font-style: italic;
            color: #666;
        }
        
        .footer {
            margin-top: 60px;
            padding: 30px 0;
            border-top: 2px solid #e1e5e9;
            text-align: center;
            color: #999;
            font-size: 0.9rem;
        }
        
        @media print {
            body {
                max-width: none;
                padding: 20px;
            }
            
            .header {
                margin-bottom: 40px;
            }
            
            h1, h2, h3, h4 {
                page-break-after: avoid;
            }
            
            .figure {
                page-break-inside: avoid;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">MedBot</div>
        <div class="subtitle">Healthcare AI Assistant</div>
        <div class="date" id="current-date"></div>
    </div>
    
    <div id="content">
        <!-- Content will be inserted here -->
    </div>
    
    <div class="footer">
        Generated by MedBot - Advanced Healthcare AI Assistant<br>
        <small>Professional medical research analysis and insights</small>
    </div>
    
    <script>
        document.getElementById('current-date').textContent = new Date().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    </script>
</body>
</html>"""
        
        with open(template_file, "w", encoding="utf-8") as f:
            f.write(template_content)
        
        return template_file
    
    def convert_markdown_to_pdf(self, markdown_file: Path, output_name: Optional[str] = None) -> Optional[Path]:
        """Convert markdown file to PDF using the best available engine"""
        
        if not markdown_file.exists():
            print(f"❌ Markdown file not found: {markdown_file}")
            return None
        
        # Determine output name
        if output_name is None:
            output_name = markdown_file.stem
        
        output_file = self.output_dir / f"{output_name}.pdf"
        
        print(f"🔄 Converting {markdown_file.name} to PDF...")
        print(f"📁 Output: {output_file}")
        
        # Try different conversion methods based on available engines
        success = False
        
        # Method 1: LaTeX with professional template (highest quality)
        if 'pdflatex' in self.available_engines:
            success = self._convert_with_latex(markdown_file, output_file)
            if success:
                return output_file
        
        # Method 2: HTML to PDF with beautiful styling
        if 'wkhtmltopdf' in self.available_engines:
            success = self._convert_with_html(markdown_file, output_file)
            if success:
                return output_file
        
        # Method 3: WeasyPrint (good for modern web styling)
        if 'weasyprint' in self.available_engines:
            success = self._convert_with_weasyprint(markdown_file, output_file)
            if success:
                return output_file
        
        # Method 4: Prince (excellent typography)
        if 'prince' in self.available_engines:
            success = self._convert_with_prince(markdown_file, output_file)
            if success:
                return output_file
        
        print("❌ All PDF conversion methods failed")
        return None
    
    def _convert_with_latex(self, markdown_file: Path, output_file: Path) -> bool:
        """Convert using LaTeX with professional template"""
        try:
            print("🔄 Trying LaTeX conversion with professional template...")
            
            # Create temporary directory for LaTeX files
            temp_dir = Path(f"temp_latex_{markdown_file.stem}")
            temp_dir.mkdir(exist_ok=True)
            
            # Create professional template
            template_file = self.create_professional_template(temp_dir)
            
            # Convert markdown to LaTeX
            latex_content = pypandoc.convert_file(
                str(markdown_file), 
                'latex', 
                format='md',
                extra_args=[
                    '--template=' + str(template_file),
                    '--standalone',
                    '--pdf-engine=pdflatex',
                    '--variable=geometry:margin=2.5cm',
                    '--variable=fontsize=11pt',
                    '--variable=mainfont=Inter',
                    '--variable=monofont=JetBrains Mono',
                    '--toc',
                    '--number-sections',
                    '--variable=colorlinks=true',
                    '--variable=linkcolor=blue',
                    '--variable=urlcolor=blue',
                    '--variable=citecolor=green'
                ]
            )
            
            # Save LaTeX file
            latex_file = temp_dir / f"{markdown_file.stem}.tex"
            with open(latex_file, 'w', encoding='utf-8') as f:
                f.write(latex_content)
            
            # Convert LaTeX to PDF
            pypandoc.convert_file(
                str(latex_file),
                'pdf',
                format='latex',
                outputfile=str(output_file),
                extra_args=[
                    '--pdf-engine=pdflatex',
                    '--variable=geometry:margin=2.5cm'
                ]
            )
            
            # Cleanup
            shutil.rmtree(temp_dir)
            
            print(f"✅ PDF created successfully with LaTeX: {output_file}")
            return True
            
        except Exception as e:
            print(f"❌ LaTeX conversion failed: {e}")
            return False
    
    def _convert_with_html(self, markdown_file: Path, output_file: Path) -> bool:
        """Convert using HTML template and wkhtmltopdf"""
        try:
            print("🔄 Trying HTML conversion with beautiful template...")
            
            # Create temporary directory
            temp_dir = Path(f"temp_html_{markdown_file.stem}")
            temp_dir.mkdir(exist_ok=True)
            
            # Convert markdown to HTML
            html_content = pypandoc.convert_file(
                str(markdown_file),
                'html',
                format='md',
                extra_args=[
                    '--standalone',
                    '--self-contained',
                    '--css=style.css'
                ]
            )
            
            # Save HTML file
            html_file = temp_dir / f"{markdown_file.stem}.html"
            with open(html_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            # Convert HTML to PDF using wkhtmltopdf
            cmd = [
                'wkhtmltopdf',
                '--page-size', 'A4',
                '--margin-top', '20mm',
                '--margin-right', '20mm',
                '--margin-bottom', '20mm',
                '--margin-left', '20mm',
                '--encoding', 'UTF-8',
                '--print-media-type',
                '--no-outline',
                '--enable-local-file-access',
                str(html_file),
                str(output_file)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"✅ PDF created successfully with HTML: {output_file}")
                shutil.rmtree(temp_dir)
                return True
            else:
                print(f"❌ wkhtmltopdf failed: {result.stderr}")
                shutil.rmtree(temp_dir)
                return False
                
        except Exception as e:
            print(f"❌ HTML conversion failed: {e}")
            return False
    
    def _convert_with_weasyprint(self, markdown_file: Path, output_file: Path) -> bool:
        """Convert using WeasyPrint"""
        try:
            print("🔄 Trying WeasyPrint conversion...")
            
            # Convert markdown to HTML first
            html_content = pypandoc.convert_file(
                str(markdown_file),
                'html',
                format='md',
                extra_args=['--standalone']
            )
            
            # Use WeasyPrint to convert HTML to PDF
            from weasyprint import HTML, CSS
            from weasyprint.text.fonts import FontConfiguration
            
            font_config = FontConfiguration()
            html_doc = HTML(string=html_content)
            html_doc.write_pdf(str(output_file), font_config=font_config)
            
            print(f"✅ PDF created successfully with WeasyPrint: {output_file}")
            return True
            
        except Exception as e:
            print(f"❌ WeasyPrint conversion failed: {e}")
            return False
    
    def _convert_with_prince(self, markdown_file: Path, output_file: Path) -> bool:
        """Convert using Prince"""
        try:
            print("🔄 Trying Prince conversion...")
            
            # Convert markdown to HTML first
            html_content = pypandoc.convert_file(
                str(markdown_file),
                'html',
                format='md',
                extra_args=['--standalone']
            )
            
            # Save HTML file temporarily
            temp_html = Path(f"temp_{markdown_file.stem}.html")
            with open(temp_html, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            # Convert HTML to PDF using Prince
            cmd = ['prince', str(temp_html), '-o', str(output_file)]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            # Cleanup
            temp_html.unlink()
            
            if result.returncode == 0:
                print(f"✅ PDF created successfully with Prince: {output_file}")
                return True
            else:
                print(f"❌ Prince failed: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"❌ Prince conversion failed: {e}")
            return False
    
    def _convert_with_pandoc_native(self, markdown_file: Path, output_file: Path) -> bool:
        """Convert using Pandoc's native PDF engine"""
        try:
            print("🔄 Trying Pandoc native conversion...")
            
            pypandoc.convert_file(
                str(markdown_file),
                'pdf',
                format='md',
                outputfile=str(output_file),
                extra_args=[
                    '--standalone',
                    '--pdf-engine=wkhtmltopdf',
                    '--variable=geometry:margin=2cm'
                ]
            )
            
            print(f"✅ PDF created successfully with Pandoc native: {output_file}")
            return True
            
        except Exception as e:
            print(f"❌ Pandoc native conversion failed: {e}")
            return False
    
    def batch_convert(self, markdown_dir: str = "articles") -> List[Path]:
        """Convert all markdown files in a directory to PDFs"""
        markdown_dir = Path(markdown_dir)
        
        if not markdown_dir.exists():
            print(f"❌ Directory not found: {markdown_dir}")
            return []
        
        markdown_files = list(markdown_dir.glob("**/*.md"))
        
        if not markdown_files:
            print(f"❌ No markdown files found in {markdown_dir}")
            return []
        
        print(f"📁 Found {len(markdown_files)} markdown files to convert")
        
        successful_conversions = []
        
        for md_file in markdown_files:
            print(f"\n{'='*60}")
            print(f"🔄 Processing: {md_file.name}")
            print(f"{'='*60}")
            
            # Create subdirectory structure in output
            relative_path = md_file.relative_to(markdown_dir)
            output_subdir = self.output_dir / relative_path.parent
            output_subdir.mkdir(parents=True, exist_ok=True)
            
            # Convert to PDF
            pdf_file = self.convert_markdown_to_pdf(md_file, md_file.stem)
            
            if pdf_file and pdf_file.exists():
                successful_conversions.append(pdf_file)
                print(f"✅ Successfully converted: {pdf_file.name}")
            else:
                print(f"❌ Failed to convert: {md_file.name}")
        
        print(f"\n🎉 Batch conversion complete!")
        print(f"✅ Successful: {len(successful_conversions)}/{len(markdown_files)}")
        
        return successful_conversions

def main():
    """Main function for command line usage"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Convert markdown files to beautiful PDFs")
    parser.add_argument("input", help="Markdown file or directory to convert")
    parser.add_argument("-o", "--output", help="Output directory for PDFs")
    parser.add_argument("--batch", action="store_true", help="Batch convert all markdown files in directory")
    
    args = parser.parse_args()
    
    converter = MarkdownToPDFConverter(output_dir=args.output or "pdf_outputs")
    
    input_path = Path(args.input)
    
    if args.batch or input_path.is_dir():
        # Batch conversion
        converter.batch_convert(str(input_path))
    else:
        # Single file conversion
        pdf_file = converter.convert_markdown_to_pdf(input_path)
        if pdf_file:
            print(f"🎉 Successfully created: {pdf_file}")
        else:
            print("❌ Conversion failed")
            sys.exit(1)

if __name__ == "__main__":
    main()
